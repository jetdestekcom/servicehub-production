// Prisma Schema für Namecheap MySQL Hosting
// Optimiert für MySQL 8.0+

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?
  role          Role      @default(CUSTOMER)
  phone         String?
  isActive      Boolean   @default(true)
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  backupCodes   String?
  joinDate      DateTime  @default(now())
  lastActive    DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  services      Service[]
  bookings      Booking[]
  reviews       Review[]
  messages      Message[]
  notifications Notification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  price       Float
  category    String
  location    String
  images      String[] @default([])
  tags        String[] @default([])
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Provider relation
  providerId  String
  provider    User     @relation(fields: [providerId], references: [id], onDelete: Cascade)

  // Relations
  bookings    Booking[]
  reviews     Review[]

  @@map("services")
}

model Booking {
  id        String      @id @default(cuid())
  status    BookingStatus @default(PENDING)
  startDate DateTime
  endDate   DateTime?
  totalPrice Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  customerId String
  customer   User    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  serviceId  String
  service    Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  // Relations
  reviews    Review[]

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customerId String
  customer   User    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  serviceId  String
  service    Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  bookingId  String
  booking    Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  senderId   String
  sender     User    @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  receiverId String
  receiver   User    @relation(fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String   @db.Text
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum Role {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

